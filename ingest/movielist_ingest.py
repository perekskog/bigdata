#!/usr/bin/env python3
"""Convert list of movies to JSON document.

Usage:

    python3 movielist_ingest.py inputfile movielist|filelist outputfile
"""

import sys
import json


def fetch_items_movielist(filein):
    """Fetch movie items from a specially formatted text file.

    file = [ comment | movie ]*
    comment = # string
    movie = disk TAB title_with_attributes
    title_with_attributes =  title TAB attributes
    attributes = *format | COMMA § category | COMMA # language | COMMA & on_mediaserver
    title = string [string SPACE]*
    language = audio SLASH subtitle
    on_mediaserver = & ms

    Args:
        filein: Input file

    Returns:
        A sequence of movie structures.
    """

    movies = list()
    with open(filein, 'r', encoding='utf-8') as f:
        for row in f:

            # comment
            if row[0] == "#":
                print("continue 1")
                continue

            # wanted
            if row.find("§wanted") > -1:
                print("continue 2")
                continue

            print(">"+row.strip("\n)"))

            # disk, title, attributes
            tokens = row.split("\t")
            disk = ""
            title = ""
            attributes = ""
            if len(tokens) >= 1:
                disk = tokens[0].strip("\n")
            if len(tokens) >= 2:
                title = tokens[1].strip("\n")
            if len(tokens) >= 3:
                attributes = tokens[2].strip("\n")
            print("disk=[{}], title=[{}], attributes=[{}]".format(disk, title, attributes))


            # attributes
            attr = attributes.split(",")
            media = ""
            if len(attributes) == 0 and title != "---":
                media = "AttributeError"
            if len(attributes) > 0 and attributes[0] == " ":
                media = "AttributeError"
            language_spoken = ""
            language_subtitle = ""
            category = []
            onmediaserver = False
            comment = ""
            for i in attr:
                #print("<<{}>>".format(i))
                i = i.strip(" ").strip("\n")
                if len(i) == 0:
                    continue
                if i.find("*") >= 0:
                    media = i.strip("*")
                if i.find("#") >= 0:
                    languages = i.strip("#").split("/")
                    language_spoken = languages[0]
                    if len(languages) >= 2:
                        language_subtitle = languages[1]
                if i.find("§") >= 0:
                    category.append(i.strip("§"))
                if i.find("&ms") >= 0:
                    onmediaserver = True
                if i.find("/") >= 0:
                    comment = i.strip("/")
            print("\tmedia=[{}], spoken=[{}], subtitle=[{}], cat={}, ms=[{}], comment=[{}]".format(
                media, language_spoken, language_subtitle, category, onmediaserver, comment))

            movie = {"title": title, "media_location": disk, "media_type": media,
                     "audio": language_spoken, "subtitle": language_subtitle, "category": category,
                     "mediaserver": onmediaserver, "comment": comment}
            movies.append(movie)

    return movies


def fetch_items_filelist(filein):
    """Fetch movie items from a list generated by listing files.

    file = movie*
    movie = path / basename . extension
    path = ???
    basename = title [ LP productionyear RP ] [ LP language RP ] [ LP copy RP ]
    language = audio | swesub |  (audio COMMA swesub)
    productionyear = INTEGER
    audio = STRING
    copy = copy # Item is copied from disc
    extension = container
    container = mp4 | avi

    Args:
        filein: Input file

    Returns:
        A sequence of movie structures.
    """
    movies = list()
    with open(filein, 'r', encoding='utf-8') as f:
        for row in f:

            print(">"+row.strip("\n)"))

            # Strip off pathname component(s)
            # Split at "(":
            #   If a number => productionyear
            #   If "copy" => copy
            #   Else language:
            #       Split at ","
            #       If one item:
            #           audio or "swesub"
            #       If two items:
            #           Split at ",":
            #               audio or "swesub"

    return movies


def main(filein, filetype, fileout):
    """Dispatch the correct parser and write output encoded as JSON document.
    """
    items = list()

    if filetype == "movielist":
        items = fetch_items_movielist(filein)
    elif filetype == "filelist":
        items = fetch_items_filelist(filein)
    else:
        print("{}".format(__doc__))
        return

    open(fileout, 'wb').write(json.dumps(items, sort_keys=False, indent=4, ensure_ascii=False)
                              .encode('utf8'))


if __name__ == "__main__":
    if len(sys.argv) == 4:
        main(sys.argv[1], sys.argv[2], sys.argv[3])
    else:
        print("{}".format(__doc__))
